package com.sparta.todo.mock;

import com.sparta.todo.domain.todo.model.TodoEntity;
import com.sparta.todo.domain.todo.model.Todo;
import com.sparta.todo.domain.todo.command.repository.TodoRepository;
import jakarta.persistence.EntityNotFoundException;
import java.util.HashMap;
import java.util.Map;
import org.springframework.test.util.ReflectionTestUtils;

public class MockTodoRepository implements TodoRepository {
    private Long autoGeneratedId = 0L;
    private final Map<Long, TodoEntity> store = new HashMap<>();

    @Override
    public Todo findTodoBy(Long id) {
        return store.values().stream()
            .filter(todoEntity -> todoEntity.getTodoId().equals(id))
            .map(Todo::from)
            .findAny()
            .orElseThrow(EntityNotFoundException::new);
    }

    @Override
    public void save(TodoEntity todoEntity) {
        store.put(++autoGeneratedId, todoEntity);
        ReflectionTestUtils.setField(todoEntity, "todoId", autoGeneratedId);
    }

    @Override
    public void update(Todo todo) {
        TodoEntity todoEntity = store.get((Long)ReflectionTestUtils.getField(todo, "todoId"));

        ReflectionTestUtils.setField(todoEntity, "title", ReflectionTestUtils.getField(todo, "title"));
        ReflectionTestUtils.setField(todoEntity, "content", ReflectionTestUtils.getField(todo, "content"));
        ReflectionTestUtils.setField(todoEntity, "isCompleted", ReflectionTestUtils.getField(todo, "isCompleted"));
        ReflectionTestUtils.setField(todoEntity, "isPrivate", ReflectionTestUtils.getField(todo, "isPrivate"));
    }


    @Override
    public void delete(Todo todo) {
        store.remove((Long)ReflectionTestUtils.getField(todo, "todoId"));
    }
}
